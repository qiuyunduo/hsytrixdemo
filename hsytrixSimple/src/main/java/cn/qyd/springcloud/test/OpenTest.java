package cn.qyd.springcloud.test;

import com.netflix.config.ConfigurationManager;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandMetrics;
import com.netflix.hystrix.HystrixCommandProperties;

import java.util.concurrent.TimeUnit;

/**
 * @Author qyd
 * @Date 18-12-27 下午4:22
 **/
public class OpenTest {

    public static void main(String[] args) throws InterruptedException {
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.metrics.rollingStats.timeInMilliseconds",10000);
//        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.requestVolumeThreshold",10);
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.requestVolumeThreshold",3);
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.errorThresholdPercentage",50);
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds",3000);

        Boolean isTimeOut = true;

        for(int i = 0; i < 15; i++) {
            MyCommand command = new MyCommand(isTimeOut);
            command.execute();
            HystrixCommandMetrics.HealthCounts healthCounts = command.getMetrics().getHealthCounts();
            System.out.println("断路器状态： "+ command.isCircuitBreakerOpen() + ", 请求总数： "+healthCounts.getTotalRequests());

            if(command.isCircuitBreakerOpen()){
                isTimeOut = false;
                System.out.println("============断路器被打开，此时执行第"+(i+1)+"条命令， 等待休眠期结束========");
                //休眠期会在3秒内结束，此处等待4秒
                TimeUnit.SECONDS.sleep(2);
            }
        }
    }

    static class MyCommand extends HystrixCommand<String> {

        private Boolean isTimeOut;

        public MyCommand(Boolean isTimeOut) {
            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))
            .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
            .withExecutionTimeoutInMilliseconds(500))
            );

            this.isTimeOut = isTimeOut;
        }

        @Override
        protected String run() throws Exception {
            //让外部决定是否超时
            if(isTimeOut) {
                //模拟处理超时
                TimeUnit.MILLISECONDS.sleep(800);
            } else {
                TimeUnit.MILLISECONDS.sleep(400);
            }

            return "";
        }

        protected String getFallback() {
            System.out.println("执行 HelloCommand 的回退方法");
            return "error";
        }
    }
}
